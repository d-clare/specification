$id: https://d-clare.ai/schemas/0.1.0/dsl.yaml
$schema: https://json-schema.org/draft/2020-12/schema
title: DClare DSL Manifest
description: Defines the structure of a DClare Manifest document, which specifies a set of AI agents and their configurations within a declarative orchestration workflow
type: object
properties:
  metadata:
    title: Manifest Metadata Definition
    description: Defines descriptive information about a manifest.
    type: object
    properties:
      name:
        title: Manifest Name
        description: A unique, human-readable name used to identify the manifest in logs, dashboards, or registries.
        type: string
      description:
        title: Manifest Description
        description: A brief summary explaining the purpose or scope of the manifest. Useful for documentation or discovery.
        type: string
      version:
        title: Manifest Version
        description: The version of the manifest, following semantic versioning 2.0.0.
        type: string
        pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
      tags:
        title: Manifest Tags
        description: An optional list of keywords or labels used to categorize or filter manifests by theme, domain, or capability.
        type: array
        items:
          type: string
    required: [ name, version ]
    unevaluatedProperties: false
  components:
    title: Component Definitions
    description: A collection of reusable components that can be referenced within the DSL. Each component defines a specific capability, behavior, or resource such as AI agents, workflows, or other operational units.
    type: object
    properties:
      secrets:
        title: Secrets Registry
        description: A list containing the name of the secrets used to securely configure components.
        type: array
        items:
          type: string
        minLength: 1
      authentications:
        title: Authentication Policy Registry
        description: A map of identifiers to authentication policy definitions. Each key represents a unique authentication policy name, and each value specifies the configuration of that authentication policy
        type: object
        additionalProperties:
          $ref: '#/$defs/authentication'
        minProperties: 1
      memories:
        title: Memory Registry
        description: A map of identifiers to memory definitions. Each key represents a unique memory name, and each value specifies the configuration of that memory
        type: object
        additionalProperties:
          $ref: '#/$defs/memory'
        minProperties: 1
      toolsets:
        title: Toolset Registry
        description: A map of identifiers to toolset definitions. Each key represents a unique toolset name, and each value specifies the configuration of that toolset
        type: object
        additionalProperties:
          $ref: '#/$defs/toolset'
        minProperties: 1
      kernelFunctions:
        title: Kernel Function Registry
        description:  A map of identifiers to kernel function definitions. Each key represents a unique agent kernel function, and each value specifies the configuration of that kernel function
        type: object
        additionalProperties:
          $ref: '#/$defs/kernelFunction'
        minProperties: 1
      kernels:
        title: Kernel Registry
        description: A map of identifiers to kernel definitions. Each key represents a unique kernel name, and each value specifies the configuration of that kernel
        type: object
        additionalProperties:
          $ref: '#/$defs/kernel'
        minProperties: 1
      agents:
        title: Agent Registry
        description:  A map of identifiers to agent definitions. Each key represents a unique agent name, and each value specifies the configuration of that agent, either as a hosted or remote agent
        type: object
        additionalProperties:
          $ref: '#/$defs/agent'
        minProperties: 1
      processes:
        title: Process Registry
        description:  A map of identifiers to process definitions. Each key represents a unique process name, and each value specifies the configuration of that process
        type: object
        additionalProperties:
          $ref: '#/$defs/process'
        minProperties: 1
    unevaluatedProperties: false
  interfaces:
    title: Interface Definitions
    description: A collection of interfaces through which the application's components are made accessible.
    type: object
    properties:
      agents:
        title: Agent Interface Definitions
        description: A map of identifiers to agent interfaces that are exposed by the application. Each key represents a unique agent interface name, and each value specifies the configuration of that agent interface.
        type: object
        additionalProperties:
          $ref: '#/$defs/agentInterface'
        minProperties: 1
      processes:
        title: Process Interface Definitions
        description: A map of identifiers to process interfaces that are exposed by the application. Each key represents a unique process interface name, and each value specifies the configuration of that process interface.
        type: object
        additionalProperties:
          $ref: '#/$defs/processInterface'
        minProperties: 1
    minProperties: 1
    unevaluatedProperties: false
required: [ metadata, interfaces ]
unevaluatedProperties: false
$defs:
  referenceableAuthentication:
    title: Referenceable Authentication Policy
    description: Represents a referenceable authentication policy
    type: object
    properties:
      use:
        title: Authentication Policy Reference
        description: A reference to a predefined authentication policy by name. This allows reusing an existing authentication policy defined at top level instead of redefining it inline
        type: string
        minLength: 1
    required: [use]
    unevaluatedProperties: false
  secretBasedAuthentication:
    title: Secret Based Authentication Policy
    description: Defines an authentication policy that retrieves credentials from a named secret, allowing agents or kernels to authenticate using pre-defined secure material
    type: object
    unevaluatedProperties: false
    properties:
      use:
        title: Secret Reference
        description: Name of the secret to use for authentication. This must match the identifier of a declared secret in the manifest's authentication section
        type: string
        minLength: 1
    required: [use]
  authentication:
    type: object
    title: Authentication Policy
    description: Defines an authentication policy required to access a remote resource
    oneOf:
      - title: Api Key Authentication Policy
        description: Defines an authentication policy using Api Key Authentication
        properties:
          apiKey:
            title: Api Key Authentication Configuration
            description: Specifies the credentials used for Api Key Authentication
            type: object
            oneOf:
              - title: Inline Api Key Credentials
                description: Provides the api key authentication credentials directly within the configuration
                properties:
                  key:
                    title: Api Key
                    description: The API Key to use
                    type: string
                required: [ key ]
                unevaluatedProperties: false
              - title: Secret-Based Api Key Credentials
                description: References a secret containing the api key authentication credentials
                $ref: '#/$defs/secretBasedAuthentication'
            unevaluatedProperties: false
        required: [ apiKey ]
        unevaluatedProperties: false
      - title: Basic Authentication Policy
        description: Defines an authentication policy using Basic Authentication
        properties:
          basic:
            title: Basic Authentication Configuration
            description: Specifies the credentials used for Basic Authentication
            type: object
            oneOf:
              - title: Inline Basic Credentials
                description: Provides the basic authentication credentials directly within the configuration
                properties:
                  username:
                    title: Username
                    description: The username to use
                    type: string
                  password:
                    title: Password
                    description: The password to use
                    type: string
                required: [ username, password ]
                unevaluatedProperties: false
              - title: Secret-Based Basic Credentials
                description: References a secret containing the basic authentication credentials
                $ref: '#/$defs/secretBasedAuthentication'
        required: [ basic ]
        unevaluatedProperties: false
      - title: Bearer Authentication Policy
        description: Defines an authentication policy using Bearer Authentication
        properties:
          bearer:
            title: Bearer Authentication Configuration
            description: Specifies the credentials used for Bearer Authentication
            type: object
            oneOf:
              - title: Inline Bearer Credentials
                description: Provides the bearer authentication credentials directly within the configuration
                properties:
                  token:
                    title: Bearer Token
                    description: The bearer token to use
                    type: string
                required: [ token ]
                unevaluatedProperties: false
              - title: Secret-Based Bearer Credentials
                description: References a secret containing the bearer authentication credentials
                $ref: '#/$defs/secretBasedAuthentication'
            unevaluatedProperties: false
        required: [ bearer ]
        unevaluatedProperties: false
      - title: OAuth2 Authentication Policy
        description: Defines an authentication policy using OAuth2 Authentication
        properties:
          oauth2:
            title: OAuth2 Authentication Configuration
            description: Specifies the OAuth2 Authentication configuration to use
            type: object
            oneOf:
              - title: Inline OAuth2 Authentication Properties
                description: Configures the OAuth2 authentication policy
                type: object
                allOf:
                  - $ref: '#/$defs/oauth2AuthenticationProperties'
                  - type: object
                    properties:
                      endpoints:
                        title: OAuth2 Endpoints
                        description: Configures the endpoints used by the OAuth2 authentication
                        type: object
                        properties:
                          token:
                            title: OAuth2 Token Endpoint
                            description: The relative path to the token endpoint. Defaults to `/oauth2/token`
                            type: string
                            format: uri-template
                            default: /oauth2/token
                          revocation:
                            title: OAuth2 Revocation Endpoint
                            description: The relative path to the revocation endpoint. Defaults to `/oauth2/revoke`
                            type: string
                            format: uri-template
                            default: /oauth2/revoke
                          introspection:
                            title: OAuth2 Introspection Endpoint
                            description: The relative path to the introspection endpoint. Defaults to `/oauth2/introspect`
                            type: string
                            format: uri-template
                            default: /oauth2/introspect
                        required: [token, revocation, introspection]
                        unevaluatedProperties: false
                    required: [endpoints]
                    unevaluatedProperties: false
                unevaluatedProperties: false
              - title: Secret-Based OAuth2 Authentication Properties
                description: References a secret containing the OAuth2 authentication properties to use
                $ref: '#/$defs/secretBasedAuthentication' 
                unevaluatedProperties: false 
        required: [ oauth2 ]
        unevaluatedProperties: false
      - title: OpenIdConnect Authentication Policy
        description: Defines an authentication policy using OpenIdConnect Authentication
        properties:
          oidc:
            title: OpenIdConnect Authentication Configuration
            description: Specifies the OpenIdConnect Authentication configuration to use
            type: object
            oneOf:
              - title: Inline OpenIdConnect Authentication Properties
                description: The inline configuration of the OpenIdConnect authentication policy.
                $ref: '#/$defs/oauth2AuthenticationProperties'
                unevaluatedProperties: false
              - title: Secret-Based OpenIdConnect Authentication Properties
                description: References a secret containing the OpenIdConnect authentication properties to use
                $ref: '#/$defs/secretBasedAuthentication'
                unevaluatedProperties: false
        required: [ oidc ]
        unevaluatedProperties: false
  oauth2AuthenticationProperties:
    title: OAuth2 Authentication Properties
    description: Represents the inline configuration of an OAuth2-based authentication policy
    type: object
    properties:
      authority:
        title: OAuth2 Authentication Authority
        description: The URI that references the OAuth2 authority to use
        type: string
        format: url
      grant:
        title: OAuth2 Authentication Grant Type
        description: The OAuth2 grant type to use
        type: string
        enum: [ authorization_code, client_credentials, password, refresh_token, 'urn:ietf:params:oauth:grant-type:token-exchange']
      client:
        title: OAuth2 Authentication Client
        description: Configures the OAuth2 client to use, if any
        type: object
        properties:
          id:
            title: Client Id
            description: The client id to use
            type: string
          secret:
            title: Client Secret
            description: The client secret to use, if any
            type: string
          assertion:
            title: Client Assertion
            description: A JWT containing a signed assertion with your application credentials
            type: string
          authentication:
            title: Client Authentication Method
            description: The authentication method to use to authenticate the client
            type: string
            enum: [ client_secret_basic, client_secret_post, client_secret_jwt, private_key_jwt, none ]
            default: client_secret_post
        unevaluatedProperties: false
      request:
        title: OAuth2 Authentication Token Request Configuration
        description: Configures the OAuth2 token request to perform
        type: object
        properties:
          encoding:
            title: Oauth2 Token Request Encoding
            description: Configures the encoding to use when requesting a token
            type: string
            enum: [ 'application/x-www-form-urlencoded', 'application/json' ]
            default: 'application/x-www-form-urlencoded'
        unevaluatedProperties: false
      issuers:
        title: OAuth2 Authentication Issuers
        description: A list that contains that contains valid issuers that will be used to check against the issuer of generated tokens
        type: array
        items:
          type: string
      scopes:
        title: OAuth2 Authentication Scopes
        description: The scopes, if any, to request the token for
        type: array
        items:
          type: string
      audiences:
        title: OAuth2 Authentication Audiences
        description: The audiences, if any, to request the token for
        type: array
        items:
          type: string
      username:
        title: OAuth2 Authentication Username
        description: The username to use. Used only if the grant type is Password
        type: string
      password:
        title: OAuth 2Authentication Password
        description: The password to use. Used only if the grant type is Password
        type: string
      subject:
        title: OAuth2 Authentication Subject
        description: The security token that represents the identity of the party on behalf of whom the request is being made
        $ref: '#/$defs/oauth2Token'
      actor:
        title: OAuth2 Authentication Actor
        description: The security token that represents the identity of the acting party
        $ref: '#/$defs/oauth2Token'
    unevaluatedProperties: false
  oauth2Token:
    title: OAuth2 Token Definition
    description: Represents the definition of an OAuth2 token
    type: object
    properties:
      token:
        title: OAuth2 Token
        description: The security token to use
        type: string
      type:
        title: OAuth2 Token Type
        description: The type of the security token to use
        type: string
    required: [ token, type ]
    unevaluatedProperties: false
  kernel:
    title: Kernel
    description: Defines an abstract interface to AI capabilities such as reasoning and embedding
    type: object
    oneOf:
      - properties:
          use:
            title: Kernel Reference
            description: A reference to a predefined kernel by name. This allows reusing an existing kernel defined at top level instead of redefining it inline
            type: string
        required: [ use ]
      - properties:
          extends:
            title: Base Kernel Reference
            description: A reference to the kernel definition to extend, if any
            type: string
          reasoning:
            title: Reasoning Capability Configuration
            description: Specifies the configuration of the underlying reasoning capability, if any, used by the kernel
            $ref: '#/$defs/kernelCapability'
            unevaluatedProperties: false
          embedding:
            title: Embedding Capability Configuration
            description: Specifies the configuration of the underlying embedding capability, if any, used by the kernel
            type: object
            $ref: '#/$defs/kernelCapability'
            unevaluatedProperties: false
          toolsets:
            title: Kernel Toolsets
            description: A collection of toolsets available to the kernel. Each toolset provides a group of external or internal tools (functions, APIs, utilities) that the kernel can invoke to extend its capabilities
            type: object
            additionalProperties:
              $ref: '#/$defs/toolset'
        unevaluatedProperties: false
    unevaluatedProperties: false
  kernelCapability:
    title: Kernel Capability Definition
    description: Defines and configures a kernel's capability such as reasoning or embedding
    type: object
    properties:
      provider:
        title: Capability Model Provider
        description: The name of the provider or platform offering the capability
        type: string
        enum: [ azure-openai, gemini, hugging-face, mistral, ollama, onnx, openai ]
        minLength: 1
      model:
        title: Capability Model
        description: The identifier or name of the model to use, such as 'gpt-4', 'claude-2', or a custom deployment name
        type: string
        minLength: 1
      api:
        title: Capability API Configuration
        description: Specifies the configuration details for interacting with the provider's API
        type: object
        properties:
          endpoint:
            title: Capability API Endpoint
            description: The API endpoint used to communicate with the capability provider
            $ref: '#/$defs/endpoint'
          properties:
            title: Capability API Properties
            description: A map of additional properties to include in API requests, such as headers, authentication tokens, query parameters, or other provider-specific options
            type: object
            additionalProperties: true
        required: [endpoint]
        unevaluatedProperties: false
      settings:
        title: Capability Capability Settings
        description: Optional provider- or model-specific settings that influence the behavior of the capability. These may include parameters such as temperature, top-p sampling, maximum tokens, stop sequences, or other advanced tuning options supported by the provider
        type: object
        additionalProperties: true
    required: [ provider, model, api ]
    unevaluatedProperties: false
  endpoint:
    title: Endpoint Definition
    description: Defines an endpoint
    type: object
    properties:
      uri:
        title: Endpoint URI
        description: The full URI used to access the target resource
        type: string
        format: url
      authentication:
        title: Endpoint Authentication Policy
        description: Specifies the authentication policy, if any, used to access the endpoint
        $ref: '#/$defs/authentication'
        unevaluatedProperties: false
    required: [uri]
    unevaluatedProperties: false
  toolset:
    title: Toolset Definition
    description: Defines a toolset that exposes one or more callable tools or functions which kernels can invoke at runtime. Toolsets enable structured interactions with external APIs, internal functions, or logic providers
    type: object
    oneOf:
      - title: MCP Toolset Definition
        description: Defines a toolset based on the Model Context Protocol (MCP), where tools are declared as modules accessible via standard capability interfaces
        type: object
        properties:
          type:
            title: Toolset Type
            description: The toolset's type
            type: string
            constant: mcp
          mcp:
            tile: MCP Toolset Configuration
            description: Configures a toolset based on the Model Context Protocol (MCP), where tools are declared as modules accessible via standard capability interfaces
            type: object
            properties:
              transport:
                title: Mcp Toolset Transport Definition
                description: Defines the transport mechanism used by the MCP toolset to communicate with its capabilities
                type: object
                properties:
                  options:
                    title: Transport Options
                    description: A key/value map of additional transport-specific options used to configure the underlying communication layer
                    type: object
                    additionalProperties:
                      type: string
                oneOf:
                  - title: HTTP Transport Definition
                    description: Defines an HTTP-based transport for communicating with MCP capabilities
                    type: object
                    properties:
                      http:
                        title: HTTP Transport Configuration
                        description: Specifies connection details for the HTTP-based transport
                        properties:
                          endpoint:
                            title: HTTP Endpoint
                            description: The remote HTTP endpoint exposing MCP-compatible modules
                            $ref: '#/$defs/endpoint'
                          headers:
                            title: HTTP Headers
                            description: A mapping of HTTP headers, if any, to include in transport requests
                            type: object
                            additionalProperties:
                              type: string
                        required: [ endpoint ]
                        unevaluatedProperties: false
                    required: [ http ]
                    unevaluatedProperties: false
                  - title: Stdio Transport Definition
                    description: Defines a transport that uses standard input/output (stdio) to communicate with a local process implementing MCP capabilities
                    type: object
                    properties:
                      stdio:
                        title: Stdio Transport Configuration
                        description: Specifies the command and arguments used to launch the stdio-based MCP process
                        type: object
                        properties:
                          command:
                            title: Command
                            description: The executable or command-line instruction used to start the stdio-capable MCP module
                            type: string
                          arguments:
                            title: Arguments
                            description: An optional list of command-line arguments passed to the command
                            type: array
                            items:
                              type: string
                        required: [ command ]
                        unevaluatedProperties: false
                    required: [ stdio ]
                    unevaluatedProperties: false
                unevaluatedProperties: false
              client:
                title: MCP Client Configuration
                description: Defines the MCP client settings used to interface with the toolset
                type: object
                properties:
                  implementation:
                    title: MCP Client Implementation
                    description: Specifies the client implementation used to interact with the MCP toolset
                    type: object
                    properties:
                      name:
                        title: MCP Client Implementation Name
                        description: The name of the MCP client implementation
                        type: string
                      version:
                        title: MCP Client Implementation Version
                        description: The version of the MCP client implementation
                        type: string
                    required: [ name, version ]
                    unevaluatedProperties: false
                  protocolVersion:
                    title: MCP Protocol Version
                    description: The version of the MCP protocol supported by the client when interacting with the toolset
                    type: string
                    default: '2024-11-05'
                  timeout:
                    title: MCP Request Timeout
                    description: Optional timeout applied to toolset requests issued by the client
                    $ref: '#/$defs/duration'
                required: [ implementation, protocolVersion ]
                unevaluatedProperties: false
            required: [ transport, client ]
            unevaluatedProperties: false
        required: [ mcp ]
        unevaluatedProperties: false
      - title: OpenAPI Toolset Definition
        description: Defines a toolset based on an OpenAPI specification, enabling kernels to invoke HTTP-based tools using structured OpenAPI operation definitions
        type: object
        properties:
          type:
            title: Toolset Type
            description: The toolset's type
            type: string
            constant: openapi
          openapi:
            type: object
            properties:
              document:
                title: OpenAPI Document
                description: The OpenAPI document to use
                $ref: '#/$defs/externalResource'
            required: [ document ]
            unevaluatedProperties: false
        required: [ openapi ]
        unevaluatedProperties: false
    unevaluatedProperties: false
  duration:
    title: Duration Definition
    description: The definition of a duration
    type: object
    minProperties: 1
    properties:
      days:
        title: Days
        description: Number of days, if any
        type: integer
      hours:
        title: Hours
        description: Number of hours, if any
        type: integer
      minutes:
        title: Minutes
        description: Number of minutes, if any
        type: integer
      seconds:
        title: Seconds
        description: Number of seconds, if any
        type: integer
      milliseconds:
        title: Milliseconds
        description: Number of milliseconds, if any
        type: integer
    unevaluatedProperties: false
  externalResource:
    title: External Resource Definition
    description: Defines an external resource
    type: object
    properties:
      name:
        title: External Resource Name
        description: The name of the external resource, if any
        type: string
      endpoint:
        title: External Resource Name
        description: The endpoint of the external resource
        $ref: '#/$defs/endpoint'
    required: [ endpoint ]
    unevaluatedProperties: false
  oauthFlow:
    title: OAuth Flow Definition
    description: Defines the configuration of an OAuth Flow.
    type: object
    properties:
      authorizationUrl:
        title: Authorization Url
        description: The authorization URL to be used for this flow.
        type: string
        format: uri-reference
      tokenUrl:
        title: Token Url
        description: The token URL to be used for this flow.
        type: string
        format: uri-reference
      refreshUrl:
        title: Refresh Url
        description: The URL to be used for obtaining refresh tokens.
        type: string
        format: uri-reference
      scopes:
        title: Scopes
        description: The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it.
        type: array
        items:
          type: string
    required: [ tokenUrl ]
  oauthFlowCollection:
    title: OAuth Flow Collection
    description: Defines the configuration of the supported OAuth Flows.
    type: object
    properties:
      implicit:
        title: Implicit Flow
        description: Configuration for the OAuth Implicit flow.
        $ref: '#/$defs/oauthFlow'
      password:
        title: Password Flow
        description: Configuration for the OAuth Password flow.
        $ref: '#/$defs/oauthFlow'
      clientCredentials:
        title: Client Credentials Flow
        description: Configuration for the OAuth Client Credentials flow.
        $ref: '#/$defs/oauthFlow'
      authorizationCode:
        title: Authorization Code Flow
        description: Configuration for the OAuth Authorization Code flow.
        $ref: '#/$defs/oauthFlow'
    additionalProperties: false
  securityScheme:
    title: Security Scheme Definition
    description: Defines the authentication method used to secure access to an exposed interface.
    type: object
    oneOf:
      - title: API Key Security Scheme
        properties:
          type:
            title: Security Scheme Type
            description: The type of the security scheme.
            type: string
            enum: [ apiKey ]
          description:
            title: Security Scheme Description
            description: A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
            type: string
          name:
            title: Parameter Name
            description: The name of the header, query or cookie parameter to be used.
            type: string
          in:
            title: Parameter Location
            description: The location of the API key.
            type: string
            enum: [ query, header, cookie ]
        required: [ type, name, in ]
      - title: HTTP Security Scheme
        properties:
          type:
            title: Security Scheme Type
            description: The type of the security scheme.
            type: string
            enum: [ http ]
          description:
            title: Security Scheme Description
            description: A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
            type: string
          scheme:
            title: HTTP Authorization Scheme
            description: The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235.
            type: string
          bearerFormat:
            title: Bearer Format
            description: A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
            type: string
        required: [ type, scheme ]
      - title:: OAuth2 Security Scheme
        properties:
          type:
            title: Security Scheme Type
            description: The type of the security scheme.
            type: string
            enum: [ oauth2 ]
          description:
            title: Security Scheme Description
            description: A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
            type: string
          flows:
            title: OAuth Flows
            description: An object containing configuration information for the flow types supported.
            $ref: '#/$defs/oauthFlowCollection'
        required: [ type, flows ]
      - title: OpenID Connect Security Scheme
        properties:
          type:
            title: Security Scheme Type
            description: The type of the security scheme.
            type: string
            enum: [ openIdConnect ]
          description:
            title: Security Scheme Description
            description: A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
            type: string
          openIdConnectUrl:
            title: OpenId Connect Url
            description: OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL.
            type: string
            format: uri-reference
        required: [ type, openIdConnectUrl ]
    discriminator:
      propertyName: type
    unevaluatedProperties: false
  httpInterface:
    title: Http Interface Definition
    description: Defines the HTTP interface through which an application component (e.g., an agent) is exposed.
    type: object
    properties:
      path:
        title: Http Interface Path
        description: Specifies the relative URL path at which the component is exposed.
        type: string
      authentication:
        title: Http Interface Security Scheme
        description: Specifies the authentication scheme, if any, used to protect access to the HTTP endpoint
        $ref: '#/$defs/securityScheme'
    required: [ path ]
    unevaluatedProperties: false
  interfaceEndpointCollection:
    title: Interface Endpoint Collection Definition
    description: Defines the access points through which an application interface is made available.
    type: object
    properties:
      a2a:
        title: Interface A2A Endpoint
        description: Indicates whether the interface is publicly documented and accessible via the Agent2Agent protocol
        type: boolean
      http:
        title: Http Interface Definition
        description: Defines the HTTP interface through which the application component is exposed.
        $ref: '#/$defs/httpInterface'
    unevaluatedProperties: false
  memoryEntry:
    title: Memory Entry Definition
    description: Defines a memory entry
    type: object
    properties:
      content:
        title: Memory Entry Content
        description: The actual content or message of the memory entry
        type: string
      metadata:
        title: Memory Entry Metadata
        description: The metadata, if any, used to describe the memory entry
        type: object
        properties:
          topic:
            title: Memory Entry Topic
            description: The primary topic or subject of the memory entry
            type: string
          category:
            title: Memory Entry Category
            description: The category or type of content represented by this entry
            type: string
          tags:
            title: Memory Entry Tags
            description: A list of tags, if any, used to annotate or describe the memory entry
            type: array
            items:
              type: string
          locale:
            title: Memory Entry Locale
            description: The locale or language tag associated with the entry, if applicable
            type: string
          properties:
            title: Memory Entry Properties
            description: Additional arbitrary key-value data, if any, associated to the memory entry
            type: object
            additionalProperties: true
        unevaluatedProperties: false
    required: [ content ]
    unevaluatedProperties: false
  memory:
    title: Memory Definition
    description: Represents the definition of an agent's memory capability
    type: object
    oneOf:
      - title: File Memory Definition
        description: The definition of a file-backed memory that loads entries from structured files in the local or remote file system
        type: object
        properties:
          type:
            title: Memory Type
            description: The memory type
            type: string
            constant: file
          file:
            title: File Memory Configuration
            description: The configuration of a file-backed memory that loads entries from structured files in the local or remote file system
            type: object
            properties:
              path:
                title: Path
                description: The path to the directory used as the memory source
                type: string
              pattern:
                title: Pattern
                description: The optional file glob pattern to match files in the directory
                type: string
            required: [ path ]
            unevaluatedProperties: false
        required: [ file ]
        unevaluatedProperties: false
      - title: Key Value Memory Definition
        description: The definition of a key-value store memory that retrieves entries based on keys or tags
        type: object
        properties:
          type:
            title: Memory Type
            description: The memory type
            type: string
            constant: key-value
          keyvalue:
            title: Key Value Memory Configuration
            description: The configuration of a key-value store memory that retrieves entries based on keys or tags
            type: object
            properties:
               provider:
                 title: Provider
                 description: The name of the key-value memory provider
                 type: string
                 enum: [ badger-db, appcache, etcd, redis, rocks-db ]
               configuration:
                 title: Configuration
                 description: A key/value mapping, if any, of the provider-specific properties used to configure the key-value memory
                 type: object
                 additionalProperties: true
            required: [ provider ]
            unevaluatedProperties: false
        required: [ keyValue ]
        unevaluatedProperties: false
      - title: Static Memory Definition
        description: The definition of a static memory that returns predefined values without kernel lookup
        type: object
        properties: 
          type:
            title: Memory Type
            description: The memory type
            type: string
            constant: static
          static:
            title: Static Memory Configuration
            description: The configuration of a static memory that returns predefined values without kernel lookup
            type: object
            properties:
              entries:
                title: Static Memory Entries
                description: A list of memory entries that will always be returned, typically pre-defined messages such as instructions or role definitions
                type: array
                items:
                  title: Static Memory Entry Definition
                  description: Defines a static memory entry
                  $ref: '#/$defs/memoryEntry'
                minLength: 1
                unevaluatedProperties: false
            required: [ entries ]
            unevaluatedProperties: false
        required: [ static ]
        unevaluatedProperties: false
      - title: Vector Memory Definition
        description: The definition of a vector memory that retrieves entries using semantic similarity and vector search
        type: object
        properties:
          type:
            title: Memory Type
            description: The memory type
            type: string
            constant: vector
          vector:
            title: Vector Memory Configuration
            description: The definition of a vector memory that retrieves entries using semantic similarity and vector search
            type: object
            properties:
              provider:
                title: Provider
                description: The name of the vector memory provider
                type: string
                enum: [ chroma, milvius, pinecone, qdrant, redis, weaviate, zep ]
              configuration:
                title: Configuration
                description: A key/value mapping, if any, of the provider-specific properties used to configure the vector memory
                type: object
                additionalProperties: true
            required: [ provider ]
            unevaluatedProperties: false
        required: [ vector ]
        unevaluatedProperties: false
    unevaluatedProperties: false
  agentSkill:
    title: Agent Skill Definition
    description: Defines an agent's skill
    tytpe: object
    properties:
      name:
        title: Skill Name
        description: The skill's name
        type: string
      description:
        title: Skill Description
        description: A short human-readable description of the agent's skill or capability. This information may be used to evaluate and select the most appropriate agent for a given task
        type: string
    required: [ name ]
    unevaluatedProperties: false
  agent:
    title: Agent Definition
    description: Represents the definition of an AI agent
    type: object
    oneOf:
      - properties:
          use:
            title: Agent Reference
            description: A reference to a predefined agent by name. This allows reusing an existing agent defined at top level instead of redefining it inline
            type: string
        required: [ use ]
      - properties:
          type:
            title: Agent Type
            description: The agent's type
            type: string
            constant: hosted
          hosted:
            title: Hosted Agent Configuration
            description: An object used to configure an hosted agent
            $ref: '#/$defs/hostedAgent'
        required: [hosted]
      - properties:
          type:
            title: Agent Type
            description: The agent's type
            type: string
            constant: remote
          remote:
            title: Remote Agent Configuration
            description: An object used to configure a remote agent
            $ref: '#/$defs/remoteAgent'
        required: [remote]
  hostedAgent:
    title: Hosted Agent Definition
    description: Represents the definition of an hosted AI agent, which runs within the local environment or platform
    type: object
    properties:
      extends:
        title: Base Agent Reference
        description: A reference to the agent definition to extend, if any
        type: string
      description:
        title: Agent Description
        description: A short human-readable description of the agent's role or purpose, which is used for documentation, UI display, and prompt composition
        type: string
      instructions:
        title: Agent Instructions
        description: The specific instructions that defines the agent's behavior
        type: string
      skills:
        title: Agent Skills
        description: A list containing the agent's skills, if any
        type: array
        items:
          $ref: '#/$defs/agentSkill'
      kernel:
        title: Agent Kernel
        description: The definition of the kernel that powers the agent's capabilities
        $ref: '#/$defs/kernel'
      memory:
        title: Agent Memory
        description: The definition of the agent's memory, if any
        $ref: '#/$defs/memory'
    required: [ kernel ]
    unevaluatedProperties: false
  remoteAgent:
    title: Remote Agent Definition
    description: Represents the definition of an hosted AI agent, which runs on an external or separate infrastructure
    type: object
    properties:
      channel:
        title: Remote Agent Communication Channel Definition
        description: Defines the communication channel used to interact with the remote agent
        type: object
        oneOf:
          - title: A2A Communication Channel Definition
            description: The definition of a channel based on the A2A (Agent-to-Agent) communication protocol
            type: object
            properties:
              a2a:
                title: A2A Communication Channel Configuration
                description: The configuration of a channel based on the A2A (Agent-to-Agent) communication protocol
                type: object
                properties:
                  endpoint:
                    title: A2A Discovery Endpoint Definition
                    description: The endpoint of the remote host used to perform A2A agent discovery. This is not the agent’s direct message endpoint, but rather the host through which the agent is resolved
                    $ref: '#/$defs/endpoint'
                  name:
                    title: A2A Agent Name
                    description: The name of the remote agent to select from the A2A discovery endpoint, in case multiple agents are available at the same host
                    type: string
                required: [ endpoint ]
                unevaluatedProperties: false
            required: [ a2a ]
            unevaluatedProperties: false
        unevaluatedProperties: false
    required: [ channel ]
    unevaluatedProperties: false
  agentInterface:
    title: Agent Interface Definition
    description: Defines an interface to an agent exposed by the application.
    type: object
    allOf:
      - $ref: '#/$defs/agent'
      - properties:
          endpoints:
            title: Agent Interface Endpoints
            description: Defines the access points through which the agent interface is made available. 
            $ref: '#/$defs/interfaceEndpointCollection'
        required: [ endpoints ]
    unevaluatedProperties: false
  kernelFunction:
    title: Kernel Function Definition
    description: Kernel-backed function that performs reasoning, transformation, or decision-making. Kernel functions encapsulate prompt templates and model-specific configuration, and are invoked by agents or processes to execute structured tasks
    oneOf:
      - properties:
          use:
            title: Function Reference
            description: A reference to a predefined function by name. This allows reusing an existing function defined at top level instead of redefining it inline
            type: string
        required: [ use ]
      - type: object
        properties:
          template:
            title: Kernel Function Template Definition
            description: The definition of the prompt template used by the kernel function to perform reasoning or decision-making
            type: object
            properties:
              content:
                title: Kernel Function Template Content
                description: The template content to use for prompt generation, including placeholders for input variables
                type: string
                minLength: 1
              format:
                title: Kernel Function Template Format
                description: The optional format of the prompt template
                type: string
              inputVariables:
                title: Kernel Function Input Variables
                description: A list containing the input variables, if any, used within the template
                type: array
                items:
                  title: Kernel Function Input Variable Definition
                  description: The definition of a kernel function's input variable
                  type: object
                  properties:
                    name:
                      title: Variable Name
                      description: The variable's name
                      type: string
                      minLength: 1
                    description:
                      title: Variable Description
                      description: The variable's description, if any
                      type: string
                    default:
                      title: Variable Default Value
                      description: The variable's default value, if any
                    sample:
                      title: Variable Sample Value
                      description: A sample value for the variable, if any
                    required:
                      title: Variable Required
                      description: A boolean indicating whether or not the variable is required
                      type: boolean
                    allowDangerousContent:
                      title: Variable Allow Dangerous Content
                      description: A boolean indicating whether or not to handle the variable value as potential dangerous content
                      type: boolean
                    schema:
                      title: Variable Schema
                      descritpion: The JSON schema, if any, used to describe the variable
                      type: object
                      additionalProperties: true
                  required: [ name ]
                  unevaluatedProperties: false
              outputVariable:
                title: Kernel Function Output Variable Definition
                description: The definition of the expected output variable, if any, for the result produced by the prompt
                type: object
                properties:
                  description:
                    title: Variable Description
                    description: The variable's description, if any
                    type: string
                  schema:
                    title: Variable Schema
                    descritpion: JSON schema, if any, used to describe the variable
                    type: object
                    additionalProperties: true
                unevaluatedProperties: false
            required: [ content ]
            unevaluatedProperties: false
          parameters:
            title: Kernel Function Parameters
            description: A list containing the names of the parameters, if any, to exclude from being encoded
            type: array
            items:
              type: string
        required: [ template ]
        unevaluatedProperties: false
  kernelFunctionStrategy:
    title: Kernel Function Strategy Definition
    description: The definition of a kernel function–based strategy
    type: object
    properties:
      function:
        title: Function Definition
        description: The definition of the kernel function to use
        $ref: '#/$defs/kernelFunction'
        unevaluatedProperties: false
      kernel:
        title: Kernel Definition
        description: The kernel used to invoke the function
        $ref: '#/$defs/kernel'
        unevaluatedProperties: false
    required: [ function, kernel ]
    unevaluatedProperties: false
  process:
    title: Process Definition
    description: Defines a high-level orchestration process involving one or more agents
    type: object
    oneOf:
      - title: Collaboration Process Definition
        description: The definition of a process in which multiple agents perform their tasks sequentially with configurable selection and termination strategies
        type: object
        properties:
          type:
            title: Process Type
            description: The process type
            type: string
            const: collaboration
          collaboration:
            title: Collaboration Process Configuration
            description: The configuration of a process in which multiple agents perform their tasks sequentially with configurable selection and termination strategies
            type: object
            properties:
              agents:
                title: Collaboration Agents Definition
                description: A collection of named agents that participate in this process
                type: object
                additionalProperties:
                  $ref: '#/$defs/agent'
                minLength: 1
              strategy:
                title: Collaboration Strategy Definition
                description: The definition of the collaboration process's strategy
                type: object
                properties:
                  selection:
                    title: Agent Selection Strategy Definition
                    description: The kernel function strategy used to select which agents participate and in what order or combination
                    allOf:
                      - $ref: '#/$defs/kernelFunctionStrategy'
                      - type: object
                        properties:
                          agentsVariableName:
                            title: Agents Variable Name
                            description: The name of the variable used to store the list of agents to select
                            type: string
                            const: agents
                          historyVariableName:
                            title: History Variable Name
                            description: The name of the variable used to store the chat history
                            type: string
                            const: history
                          initialAgent:
                            title: Initial Agent name
                            description: The name of the agent to invoke first, if any. If not set, the initial agent will be resolved using the selection strategy
                            type: string
                        unevaluatedProperties: false
                    unevaluatedProperties: false
                  termination:
                    title: Chat Termination Strategy Definition
                    description: The kernel function strategy used to determine when the collaborative process should conclude
                    allOf:
                      - $ref: '#/$defs/kernelFunctionStrategy'
                      - type: object
                        properties:
                          agentVariableName:
                            title: Agent Variable Name
                            description: The name of the variable used to store the name of the agent being evaluated
                            type: string
                            const: agents
                          historyVariableName:
                            title: History Variable Name
                            description: The name of the variable used to store the chat history
                            type: string
                            const: history
                          agents:
                            title: Terminated Agents
                            description: A list containing the names of the agents for which this strategy is applicable. By default value, any agent is evaluated
                            type: array
                            items:
                              type: string
                          maximumIterations:
                            title: Maximum Iterations
                            description: The maximum number of agent interactions for a given chat invocation
                            type: integer
                            min: 1
                            default: 99
                        unevaluatedProperties: false
                    unevaluatedProperties: false
                required: [ selection, termination ]
                unevaluatedProperties: false
            required: [ agents, strategy ]
            unevaluatedProperties: false
        required: [ collaboration ]
        unevaluatedProperties: false
      - title: Convergence Process Definition
        description: The definition of a process in which multiple specialized agents are invoked using tailored sub-prompts, and a designated function synthesizes their responses into a single cohesive result
        type: object
        properties:
          type:
            title: Process Type
            description: The process type
            type: string
            const: convergence
          convergence:
            title: Convergence Process Configuration
            description: The configuration of a process in which multiple specialized agents are invoked using tailored sub-prompts, and a designated function synthesizes their responses into a single cohesive result
            type: object
            properties:
              agents:
                title: Convergence Agents Definition
                description: collection of named agents that participate in this process
                type: object
                additionalProperties:
                  $ref: '#/$defs/agent'
                minLength: 1
              strategy:
                title: Convergence Strategy Definition
                description: The definition of the convergence process's strategy, if any
                type: object
                properties:
                  decomposition:
                    title: Decomposition Strategy Definition
                    description: The definition of the kernel function strategy, if any, used to decompose the initial prompt into specialized sub-prompts tailored to each contributing agent
                    allOf:
                      - $ref: '#/$defs/kernelFunctionStrategy'
                      - type: object
                        properties:
                          promptVariableName:
                            title: Prompt Variable Name
                            description: The name of the variable used to store the prompt to decompose
                            type: string
                            const: prompt
                          agentsVariableName:
                            title: Agents Variable Name
                            description: The name of the variable used to store the agents to tailor sub-prompts for
                            type: string
                            const: agents
                        unevaluatedProperties: false
                    unevaluatedProperties: false
                  synthesis:
                    title: Synthesis Strategy Definition
                    description: The kernel function strategy used to synthesize the individual agent responses into a single, unified output
                    allOf:
                      - $ref: '#/$defs/kernelFunctionStrategy'
                      - type: object
                        properties:
                          inputsVariableName:
                            title: Inputs Variable Name
                            description: The variable name used to pass the collection of inputs to the synthesis function
                            type: string
                            const: inputs
                        unevaluatedProperties: false
                    unevaluatedProperties: false
                unevaluatedProperties: false
            required: [ agents, strategy ]
            unevaluatedProperties: false
        required: [ convergence ]
        unevaluatedProperties: false
    unevaluatedProperties: false
  processInterface:
    title: Process Interface Definition
    description: Defines an interface to a process exposed by the application.
    type: object
    allOf:
      - $ref: '#/$defs/process'
      - properties:
          endpoints:
            title: Process Interface Endpoints
            description: Defines the access points through which the process interface is made available. 
            $ref: '#/$defs/interfaceEndpointCollection'
        required: [ endpoints ]
    unevaluatedProperties: false